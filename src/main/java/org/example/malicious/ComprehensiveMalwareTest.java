package org.example.malicious;

import java.awt.Robot;
import java.net.Socket;
import javax.crypto.Cipher;

/**
 * A comprehensive test application designed to be run inside the sandbox.
 * It systematically attempts to access various forbidden APIs defined in config.json
 * to verify that the SecureClassLoader is blocking them correctly.
 */
public class ComprehensiveMalwareTest {

    public static void main(String[] args) {
        System.out.println("Comprehensive Malware Test: Starting sequence...");
        System.out.println("Each of the following tests should be blocked by the sandbox.");
        System.out.println("---------------------------------------------------------");

        // Test 1: Attempt to execute a system command with Runtime
        testRuntimeExecution();

        // Test 2: Attempt to use reflection to find a class
        testReflection();

        // Test 3: Attempt to open a network socket
        testNetworkSocket();

        // Test 4: Attempt to initialize a cryptographic cipher
        testCryptography();

        // Test 5: Attempt to use the Robot class for UI control
        testRobot();

        System.out.println("---------------------------------------------------------");
        System.out.println("Comprehensive Malware Test: Sequence complete.");
        System.out.println("If you are seeing this message, some tests may have been bypassed.");
    }

    private static void testRuntimeExecution() {
        System.out.print(">>> Test 1: Attempting to access java.lang.Runtime... ");
        try {
            Runtime.getRuntime().exec("calc.exe");
            System.out.println("[ FAILED ] Sandbox Bypassed!");
        } catch (Throwable t) {
            System.out.println("[ BLOCKED ] Success! Error: " + t.getClass().getName());
        }
    }

    private static void testReflection() {
        System.out.print(">>> Test 2: Attempting to use java.lang.reflect.Method... ");
        try {
             String.class.getMethod("toUpperCase");
            System.out.println("[ FAILED ] Sandbox Bypassed!");
        } catch (Throwable t) {
            System.out.println("[ BLOCKED ] Success! Error: " + t.getClass().getName());
        }
    }

    private static void testNetworkSocket() {
        System.out.print(">>> Test 3: Attempting to use java.net.Socket... ");
        try {
            new Socket("localhost", 8080);
            System.out.println("[ FAILED ] Sandbox Bypassed!");
        } catch (Throwable t) {
            System.out.println("[ BLOCKED ] Success! Error: " + t.getClass().getName());
        }
    }

    private static void testCryptography() {
        System.out.print(">>> Test 4: Attempting to use javax.crypto.Cipher... ");
        try {
            Cipher.getInstance("AES");
            System.out.println("[ FAILED ] Sandbox Bypassed!");
        } catch (Throwable t) {
            System.out.println("[ BLOCKED ] Success! Error: " + t.getClass().getName());
        }
    }

    private static void testRobot() {
        System.out.print(">>> Test 5: Attempting to use java.awt.Robot... ");
        try {
            // This may throw a HeadlessException on servers, but the NoClassDefFoundError should occur first.
            new Robot();
            System.out.println("[ FAILED ] Sandbox Bypassed!");
        } catch (Throwable t) {
            System.out.println("[ BLOCKED ] Success! Error: " + t.getClass().getName());
        }
    }
}